import torch
import torch.nn as nn
import numpy as np
import warnings
warnings.filterwarnings('ignore')

class SolarRNA(nn.Module):
    """Mesma arquitetura do modelo treinado SEM normaliza√ß√£o"""
    def __init__(self):
        super(SolarRNA, self).__init__()
        
        self.network = nn.Sequential(
            nn.Linear(2, 32),
            nn.ReLU(),
            nn.Dropout(0.2),
            
            nn.Linear(32, 16),
            nn.ReLU(),
            nn.Dropout(0.1),
            
            nn.Linear(16, 8),
            nn.ReLU(),
            
            nn.Linear(8, 1)
        )
    
    def forward(self, x):
        return self.network(x)

def carregar_modelo():
    """Carrega o modelo treinado SEM normaliza√ß√£o"""
    try:
        checkpoint = torch.load('modelo_sem_normalizacao.pth', map_location='cpu', weights_only=False)
        
        modelo = SolarRNA()
        modelo.load_state_dict(checkpoint['model'])
        modelo.eval()
        
        feature_names = checkpoint['feature_names']
        target_name = checkpoint['target_name']
        input_ranges = checkpoint['input_ranges']
        
        print("‚úÖ Modelo carregado com sucesso!")
        print(f"   Entrada: {feature_names[0]} + {feature_names[1]}")
        print(f"   Sa√≠da: {target_name}")
        print(f"   Range Irradia√ß√£o: {input_ranges['irradiacao_min']:.1f} - {input_ranges['irradiacao_max']:.1f}")
        print(f"   Range Temperatura: {input_ranges['temperatura_min']:.1f} - {input_ranges['temperatura_max']:.1f}")
        
        return modelo, input_ranges
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar modelo: {e}")
        return None, None

def prever_geracao(modelo, irradiacao, temperatura, mostrar_detalhes=True):
    """
    Faz predi√ß√£o de gera√ß√£o solar (DIRETO - sem normaliza√ß√£o)
    
    Par√¢metros:
    - irradiacao: Irradia√ß√£o solar em kWh/m¬≤
    - temperatura: Temperatura em ¬∞C
    
    Retorna:
    - Gera√ß√£o prevista em kWh
    """
    try:
        # Usar valores DIRETOS (sem normaliza√ß√£o)
        entrada = torch.FloatTensor([[irradiacao, temperatura]])
        
        # Predi√ß√£o direta
        with torch.no_grad():
            resultado = modelo(entrada)
            geracao_prevista = resultado.item()
        
        if mostrar_detalhes:
            print(f"\n‚ö° PREDI√á√ÉO:")
            print(f"   Irradia√ß√£o: {irradiacao:.2f} kWh/m¬≤")
            print(f"   Temperatura: {temperatura:.1f}¬∞C")
            print(f"   Gera√ß√£o prevista: {geracao_prevista:.2f} kWh")
        
        return geracao_prevista
        
    except Exception as e:
        print(f"‚ùå Erro na predi√ß√£o: {e}")
        return None

def teste_interativo():
    """Interface para testar o modelo com dados que voc√™ digita"""
    print("üåû TESTADOR DO MODELO SOLAR (SEM NORMALIZA√á√ÉO)")
    print("="*55)
    
    modelo, ranges = carregar_modelo()
    if modelo is None:
        return
    
    print("\nüìù VALORES BASEADOS NOS SEUS DADOS:")
    print("   ‚Ä¢ Irradia√ß√£o: 0-30+ kWh/m¬≤ (baseado na tabela real)")
    print("   ‚Ä¢ Temperatura: 21-34¬∞C (baseado na tabela real)")
    print("   ‚Ä¢ Digite 'sair' para terminar")
    
    while True:
        print("\n" + "-"*50)
        
        # Entrada da irradia√ß√£o
        try:
            irrad_input = input("üåû Irradia√ß√£o solar (kWh/m¬≤): ").strip()
            if irrad_input.lower() == 'sair':
                break
            irradiacao = float(irrad_input)
            
            if irradiacao < 0:
                print("‚ö†Ô∏è  Irradia√ß√£o n√£o pode ser negativa")
                continue
            elif irradiacao > 35:
                print("‚ö†Ô∏è  Irradia√ß√£o muito alta (acima de 35)")
            
        except ValueError:
            print("‚ùå Digite um n√∫mero v√°lido para irradia√ß√£o")
            continue
        
        # Entrada da temperatura
        try:
            temp_input = input("üå°Ô∏è  Temperatura (¬∞C): ").strip()
            temperatura = float(temp_input)
            
            if temperatura < 10 or temperatura > 50:
                print("‚ö†Ô∏è  Temperatura fora do range t√≠pico (10-50¬∞C)")
            
        except ValueError:
            print("‚ùå Digite um n√∫mero v√°lido para temperatura")
            continue
        
        # Fazer predi√ß√£o
        geracao = prever_geracao(modelo, irradiacao, temperatura)
        
        if geracao is not None:
            # Contexto baseado nos valores reais da tabela (22-51 kWh)
            if geracao > 48:
                status = "üî• Excelente gera√ß√£o! (acima de 48 kWh)"
            elif geracao > 40:
                status = "‚òÄÔ∏è Muito boa gera√ß√£o (40-48 kWh)"
            elif geracao > 32:
                status = "üå§Ô∏è Boa gera√ß√£o (32-40 kWh)"
            elif geracao > 25:
                status = "‚òÅÔ∏è Gera√ß√£o moderada (25-32 kWh)"
            else:
                status = "üåßÔ∏è Baixa gera√ß√£o (abaixo de 25 kWh)"
            
            print(f"   {status}")

def teste_cenarios():
    """Testa cen√°rios baseados nos dados reais"""
    print("\nüß™ TESTE DE CEN√ÅRIOS (BASEADOS NOS DADOS REAIS)")
    print("="*55)
    
    modelo, ranges = carregar_modelo()
    if modelo is None:
        return
    
    # Cen√°rios baseados nos valores reais da tabela
    cenarios = [
        (25.0, 25, "Irradia√ß√£o alta, temperatura amena"),
        (20.0, 30, "Irradia√ß√£o boa, temperatura alta"),
        (15.0, 23, "Irradia√ß√£o m√©dia, temperatura baixa"),
        (10.0, 28, "Irradia√ß√£o baixa, temperatura alta"),
        (5.0, 22, "Irradia√ß√£o muito baixa"),
        (30.0, 32, "Irradia√ß√£o m√°xima, temperatura alta"),
        (18.0, 26, "Condi√ß√µes t√≠picas"),
        (1.0, 25, "Quase sem irradia√ß√£o"),
        (0.0, 24, "Sem irradia√ß√£o (noite)")
    ]
    
    print(f"{'Cen√°rio':<32} {'Irrad':>6} {'Temp':>5} {'Gera√ß√£o':>8}")
    print("-" * 55)
    
    for irradiacao, temperatura, descricao in cenarios:
        geracao = prever_geracao(modelo, irradiacao, temperatura, mostrar_detalhes=False)
        
        if geracao is not None:
            print(f"{descricao:<32} {irradiacao:>6.1f} {temperatura:>5.0f} {geracao:>8.1f}")

def calcular_estimativa_mensal():
    """Calcula estimativa mensal baseada nos dados reais"""
    print("\nüìä ESTIMATIVA DE GERA√á√ÉO MENSAL")
    print("="*40)
    
    modelo, ranges = carregar_modelo()
    if modelo is None:
        return
    
    try:
        print("Digite as condi√ß√µes m√©dias do m√™s:")
        print("(Baseado nos seus dados: Irradia√ß√£o 0-30+, Temperatura 21-34¬∞C)")
        
        irrad_media = float(input("Irradia√ß√£o m√©dia di√°ria (kWh/m¬≤): "))
        temp_media = float(input("Temperatura m√©dia (¬∞C): "))
        dias_mes = int(input("Dias no m√™s (default 30): ") or "30")
        
        # Calcular gera√ß√£o di√°ria m√©dia
        geracao_diaria = prever_geracao(modelo, irrad_media, temp_media, mostrar_detalhes=False)
        
        if geracao_diaria is not None:
            geracao_mensal = geracao_diaria * dias_mes
            
            print(f"\nüìà ESTIMATIVA MENSAL:")
            print(f"   Gera√ß√£o di√°ria m√©dia: {geracao_diaria:.1f} kWh")
            print(f"   Gera√ß√£o mensal: {geracao_mensal:.0f} kWh")
            print(f"   Receita estimada (R$0,65/kWh): R$ {geracao_mensal * 0.65:.0f}")
            
            # Contexto baseado nos dados reais
            if geracao_mensal > 1400:
                print("   üî• Excelente m√™s!")
            elif geracao_mensal > 1000:
                print("   ‚òÄÔ∏è Bom m√™s de gera√ß√£o")
            elif geracao_mensal > 700:
                print("   üå§Ô∏è M√™s razo√°vel")
            else:
                print("   ‚òÅÔ∏è M√™s com baixa gera√ß√£o")
            
    except ValueError:
        print("‚ùå Digite valores num√©ricos v√°lidos")

def teste_extremos():
    """Testa valores extremos dos dados"""
    print("\nüî¨ TESTE DE VALORES EXTREMOS")
    print("="*35)
    
    modelo, ranges = carregar_modelo()
    if modelo is None:
        return
    
    # Baseado nos ranges reais dos dados
    extremos = [
        (ranges['irradiacao_max'], ranges['temperatura_max'], "M√°ximo absoluto"),
        (ranges['irradiacao_max'], ranges['temperatura_min'], "Irrad m√°x + Temp m√≠n"),
        (ranges['irradiacao_min'], ranges['temperatura_max'], "Irrad m√≠n + Temp m√°x"),
        (ranges['irradiacao_min'], ranges['temperatura_min'], "M√≠nimo absoluto"),
        (15.0, 26.0, "Valores m√©dios t√≠picos"),
    ]
    
    print(f"{'Teste':<20} {'Irrad':>8} {'Temp':>6} {'Gera√ß√£o':>8}")
    print("-" * 45)
    
    for irrad, temp, desc in extremos:
        geracao = prever_geracao(modelo, irrad, temp, mostrar_detalhes=False)
        if geracao is not None:
            print(f"{desc:<20} {irrad:>8.1f} {temp:>6.1f} {geracao:>8.1f}")

def menu_principal():
    """Menu principal do testador"""
    while True:
        print("\n" + "="*60)
        print("üåû TESTADOR DO MODELO SOLAR (DADOS REAIS)")
        print("="*60)
        print("1. Teste interativo (inserir seus pr√≥prios valores)")
        print("2. Teste de cen√°rios t√≠picos")
        print("3. Estimativa de gera√ß√£o mensal")
        print("4. Teste de valores extremos")
        print("5. Sair")
        print("-" * 60)
        
        escolha = input("Escolha uma op√ß√£o (1-5): ").strip()
        
        if escolha == "1":
            teste_interativo()
        elif escolha == "2":
            teste_cenarios()
        elif escolha == "3":
            calcular_estimativa_mensal()
        elif escolha == "4":
            teste_extremos()
        elif escolha == "5":
            print("üëã At√© logo!")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida. Digite 1, 2, 3, 4 ou 5.")

if __name__ == "__main__":
    menu_principal()